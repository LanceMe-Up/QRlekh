generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String
  email                  String          @unique
  // phone                  String          @unique
  password               String
  role                   UserRole        @default(USER)
  profileImage           ProfileImage?
  verified               Boolean         @default(false)
  passwordResetRequested Boolean         @default(false)
  refreshToken           String?
  otp                    Otp[]
  qrlekhData             QrlekhData[]
  Category               Category[]
  favourite              QrFavourite[]
  qrBookmark             QrBookmark[]
  review                 QrReviews[]
  SubQrlekhData          SubQrlekhData[]
}

model ProfileImage {
  id    Int    @id @default(autoincrement())
  image String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      OtpType
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int?
  User   User? @relation(fields: [userId], references: [id])

  qr QrlekhData[]
}

// parent
model QrlekhData {
  id        Int          @id @default(autoincrement())
  knownFor  String
  title     String       @unique
  slug      String
  visitor   Int          @default(0)
  isFeature Boolean      @default(false)
  image     QrlekhImage?
  location  QrLocation?
  type      QrType?

  desc String

  like Int[]
  dislike Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gallery   QrlekhGallery?
  favourite QrFavourite?

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  tag TagName?

  qrBookmark QrBookmark?

  qrReviews QrReviews[]

  subQrlekh SubQrlekhData[]

}

// child
model SubQrlekhData {
  id        Int             @id @default(autoincrement())
  knownFor  String
  title     String          @unique
  slug      String
  visitor   Int             @default(0)
  isFeature Boolean         @default(false)
  image     SubQrlekhImage?
  location  QrLocation?
  type      QrType?

  desc String

  like Int[]
  dislike Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gallery   SubQrlekhGallery?
  favourite QrFavourite?

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  tag        TagName?
  qrBookmark QrBookmark?
  qrReviews  QrReviews[]

  QrlekhData   QrlekhData? @relation(fields: [qrlekhDataId], references: [id])
  qrlekhDataId Int?
}

model QrLocation {
  id   Int    @id @default(autoincrement())
  name String
  lat  Float
  long Float

  QrlekhData   QrlekhData? @relation(fields: [qrlekhId], references: [id])
  qrlekhId Int?    

  SubQrlekhData SubQrlekhData? @relation(fields: [subqrId], references: [id])
  subqrId       Int?       
}

model QrType {
  id   Int    @id @default(autoincrement())
  type String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qrlekh        QrlekhData?    @relation(fields: [qrlekhId], references: [id])
  qrlekhId      Int?           @unique
  SubQrlekhData SubQrlekhData? @relation(fields: [subQrlekhId], references: [id])
  subQrlekhId   Int?           @unique

}

model QrlekhImage {
  id    Int    @id @default(autoincrement())
  image String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  QrlekhData QrlekhData @relation(fields: [qrlekhId], references: [id])
  qrlekhId   Int        @unique
}

model QrlekhGallery {
  id      Int      @id @default(autoincrement())
  gallery String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  QrlekhData QrlekhData @relation(fields: [qrlekhId], references: [id])
  qrlekhId   Int        @unique
}

model SubQrlekhImage {
  id    Int    @id @default(autoincrement())
  image String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SubQrlekhData SubQrlekhData @relation(fields: [subQrImageId], references: [id])
  subQrImageId  Int           @unique
}

model SubQrlekhGallery {
  id      Int      @id @default(autoincrement())
  gallery String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SubQrlekhData SubQrlekhData @relation(fields: [subQrImageId], references: [id])
  subQrImageId  Int           @unique
}

model QrBookmark {
  id Int @id @default(autoincrement())

  expiryDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  qrlekhData QrlekhData? @relation(fields: [qrlekhId], references: [id])
  qrlekhId   Int?        @unique

  SubQrlekhData SubQrlekhData? @relation(fields: [subQrlekhId], references: [id])
  subQrlekhId   Int?           @unique
}

model QrFavourite {
  id        Int     @id @default(autoincrement())
  favourite Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qrlekhData QrlekhData? @relation(fields: [qrlekhId], references: [id])
  qrlekhId   Int?        @unique

  user          User?          @relation(fields: [userId], references: [id])
  userId        Int?
  SubQrlekhData SubQrlekhData? @relation(fields: [subQrfavId], references: [id])
  subQrfavId    Int?           @unique
}

model TagName {
  id      Int      @id @default(autoincrement())
  tagName String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Qrlekh   QrlekhData? @relation(fields: [qrlekhId], references: [id])
  qrlekhId Int?        @unique

  SubQrlekhData SubQrlekhData? @relation(fields: [subtagId], references: [id])
  subtagId      Int?           @unique
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
  STAFF
  VENDOR
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model QrReviews {
  id       Int     @id @default(autoincrement())
  desc     String
  israting Boolean @default(false)
  rating   Int     @default(4)

  User            User?          @relation(fields: [userId], references: [id])
  userId          Int?
  qrlekh          QrlekhData?    @relation(fields: [qrlekhId], references: [id])
  qrlekhId        Int?
  SubQrlekhData   SubQrlekhData? @relation(fields: [subQrlekhDataId], references: [id])
  subQrlekhDataId Int?
}
